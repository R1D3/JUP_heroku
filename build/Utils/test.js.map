{"version":3,"sources":["../../server/Utils/test.js"],"names":["getOutput","test","userFn","fn","args","fnName","Error","console","log","JSON","stringify","result","logs","output","success","debug","error","finish","fnToTest","Function","i","arg","push","debugLog","length","e","message"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;;AAEA,OAAO,MAAMC,OAAO,OAAOC,MAAP,EAAeC,EAAf,EAAmBC,IAAnB,EAAyBC,MAAzB,KAAoC;AACtD,MAAI;AACF,QAAI,CAACH,MAAD,IAAW,CAACC,EAAZ,IAAkB,CAACC,IAAnB,IAA2B,CAACC,MAAhC,EAAwC;AACtC,YAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD;AACDC,YAAQC,GAAR,CAAa,QAAOC,KAAKC,SAAL,CAAeL,MAAf,CAAuB,EAA3C;AACA,UAAMM,SAAS;AACbC,YAAM,EADO;AAEbC,cAAQ,EAFK;AAGbC,eAAS,EAHI;AAIbC,aAAO,EAJM;AAKbC,aAAO,EALM;AAMbC,cAAQ;AANK,KAAf;AAQA,UAAMC,WAAW,MAAM,IAAIC,QAAJ,CAAa,YAAYjB,MAAzB,GAAvB;AACA,QAAIkB,IAAI,CAAR;AACA,SAAK,MAAMC,GAAX,IAAkBjB,IAAlB,EAAwB;AACtBO,aAAOC,IAAP,CAAYU,IAAZ,CAAkB,WAAUjB,MAAO,KAAII,KAAKC,SAAL,CAAeW,GAAf,CAAoB,GAA3D;AACAV,aAAOE,MAAP,CAAcS,IAAd,CAAmBb,KAAKC,SAAL,CAAeQ,SAASG,GAAT,CAAf,CAAnB;AACA,YAAME,WAAW,MAAMvB,UAAUE,MAAV,EAAkBG,MAAlB,EAA0BgB,GAA1B,CAAvB;AACAV,aAAOI,KAAP,CAAaO,IAAb,CAAkBC,QAAlB;AACA,UAAIpB,GAAGkB,GAAH,MAAYH,SAASG,GAAT,CAAhB,EAA+B;AAC7BV,eAAOG,OAAP,CAAeQ,IAAf,CAAqB,UAASJ,SAASG,GAAT,CAAc,wBAA5C;AACA,YAAID,MAAMhB,KAAKoB,MAAL,GAAc,CAAxB,EAA2B;AACzBb,iBAAOM,MAAP,GAAgB,IAAhB;AACA;AACD;AACF,OAND,MAMO;AACLN,eAAOK,KAAP,GAAgB,mBAAkBb,GAAGkB,GAAH,CAAQ,YAAWH,SAASG,GAAT,CAAc,IAAnE;AACA;AACD;AACDD;AACD;AACD,WAAOT,MAAP;AACD,GAjCD,CAiCE,OAAOc,CAAP,EAAU;AACV,WAAO;AACLb,YAAM,CAAC,gBAAD,CADD;AAELC,cAAQ,EAFH;AAGLE,aAAO,EAHF;AAILD,eAAS,EAJJ;AAKLG,cAAQ,KALH;AAMLD,aAAOS,EAAEC;AANJ,KAAP;AAQD;AACF,CA5CM","file":"test.js","sourcesContent":["import { getOutput } from './index.js'\n\nexport const test = async (userFn, fn, args, fnName) => {\n  try {\n    if (!userFn || !fn || !args || !fnName) {\n      throw new Error('Something is really wrong in your code ...')\n    }\n    console.log(`TEST ${JSON.stringify(fnName)}`)\n    const result = {\n      logs: [],\n      output: [],\n      success: [],\n      debug: [],\n      error: '',\n      finish: false\n    }\n    const fnToTest = await new Function('return ' + userFn)()\n    let i = 0\n    for (const arg of args) {\n      result.logs.push(`Testing ${fnName} (${JSON.stringify(arg)})`)\n      result.output.push(JSON.stringify(fnToTest(arg)))\n      const debugLog = await getOutput(userFn, fnName, arg)\n      result.debug.push(debugLog)\n      if (fn(arg) === fnToTest(arg)) {\n        result.success.push(`RIGHT! ${fnToTest(arg)} was the good answer !`)\n        if (i === args.length - 1) {\n          result.finish = true\n          break\n        }\n      } else {\n        result.error = `WRONG! Expected ${fn(arg)} but got ${fnToTest(arg)} !`\n        break\n      }\n      i++\n    }\n    return result\n  } catch (e) {\n    return {\n      logs: ['Internal Error'],\n      output: [],\n      debug: '',\n      success: [],\n      finish: false,\n      error: e.message\n    }\n  }\n}\n"]}